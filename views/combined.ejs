<!DOCTYPE html>
<html>
<head>
  <link rel="shortcut icon" href="/img/favicon_57.png"/>
  <link rel="apple-touch-icon" href="/img/favicon_57.png"/>
  <link rel="apple-touch-icon" sizes="72x72" href="/img/favicon_72.png"/>
  <link rel="apple-touch-icon" sizes="114x114" href="/img/favicon_114.png"/>
  <title>NCM & Twilio</title>
  <link rel="stylesheet" href="/css/bell.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
  <script type="text/javascript" src="/js/StartAudioContext.js"></script>
  <script type="text/javascript" src="/js/Tone.js"></script>
  <script type="text/javascript" src="/js/socket.io.slim.js"></script>
  <script type="text/javascript" src="/js/socket.js"></script>
  


</head>
<body class="vbox viewport">
  <h1 id="log">Hello</h1>
  <a href="#" id="play" class="button">Play</a>
  <audio controls download></audio>
  <h2>All the songs..........</h2>

  
</body>

<script>
  const notes = <%- JSON.stringify(notes) %>;
  const genre = `<%- genre %>`;
  const audio = document.querySelector('audio');
  const beat = genre == 'HipHop' ? 'drum_beat' : 'conga_jungle';

  //set the transport
  Tone.Transport.bpm.value = genre == 'HipHop' ? 90 : 100;
  Tone.Transport.loop = true;
  Tone.Transport.loopStart = 0;
  Tone.Transport.loopEnd = "4m";

  const chunks = [];
  const actx = Tone.context;
  const dest  = actx.createMediaStreamDestination();
  const recorder = new MediaRecorder(dest.stream);

  recorder.ondataavailable = evt => {
    chunks.push(evt.data);
  }
  recorder.onstop = evt => {
    socket.emit('end_song');
    let blob = new Blob(chunks, { type: 'audio/webm' });
    audio.src = URL.createObjectURL(blob);
    sendAudio(blob, evt.target.stream.id);
  };

  const logStuff = (msg) => {
    $('#log').text(msg);
  }

  const kickOffRecording = () => {
    recorder.start();
    setTimeout(() => {
      recorder.stop();
    }, 42000);
  }

  const startSong = () => {
    Tone.Transport.start();
    window[beat].mute = false;
    console.log('Starting Song!');
    kickOffRecording();
  }

  const resetSong = () => {
    Tone.Transport.stop();
    window[beat].mute = true;
    logStuff('RESET');
    chunks = [];
  }

  const success = (data) => {
    console.log(data);
    console.log('success!')
  }

  const sendAudio = (blob, id) => {
    let formdata = new FormData();
    formdata.append('soundBlob', blob,  `${id}.webm`);
    $.ajax({
      type: "POST",
      url: '/upload',
      enctype: 'multipart/form-data',
      data: formdata,
      success: success,
      cache: false,
      contentType: false,
      processData: false
    });
  }

  StartAudioContext(Tone.context._context, '#play').then(function(){
    //started
    logStuff('context started');
    // startSong()
  })

  for (var i=0; i<notes.length; i++) {
    window[notes[i]] = new Tone.Player({
      url: `/audio/${genre}/${notes[i]}.mp3`,
      loop: true,
      mute: true,
      fadeIn: '8n'
    }).connect(dest).toMaster().sync().start(0);
  }


  $(document).ready(function () {
    setTimeout(() => {
      console.log(socket);
      socket.on('start_song', () => {
        startSong();
      })

      socket.on('reset_players', () => {
        resetSong();
      })

      socket.on('play_sound', (msg) => {
        logStuff(`${msg.note}: ${msg.action}`);
        console.log(msg);
        window[msg.note].mute = msg.action == 'stop';
      })

    }, 1000)
  });
</script>
</html>